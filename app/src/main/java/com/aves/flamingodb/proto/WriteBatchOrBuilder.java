// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firebase/firestore/proto/mutation.proto

package com.aves.flamingodb.proto;

public interface WriteBatchOrBuilder extends
    // @@protoc_insertion_point(interface_extends:firestore.client.WriteBatch)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * An identifier for this batch, allocated by the mutation queue in a
   * monotonically increasing manner.
   * </pre>
   *
   * <code>int32 batch_id = 1;</code>
   * @return The batchId.
   */
  int getBatchId();

  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  java.util.List<com.google.firestore.v1.Write> 
      getWritesList();
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  com.google.firestore.v1.Write getWrites(int index);
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  int getWritesCount();

  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   * @return Whether the localWriteTime field is set.
   */
  boolean hasLocalWriteTime();
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   * @return The localWriteTime.
   */
  com.google.protobuf.Timestamp getLocalWriteTime();

  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  java.util.List<com.google.firestore.v1.Write> 
      getBaseWritesList();
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  com.google.firestore.v1.Write getBaseWrites(int index);
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  int getBaseWritesCount();
}
