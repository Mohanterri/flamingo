// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firebase/firestore/proto/mutation.proto

package com.aves.flamingodb.proto;

/**
 * <pre>
 * Message containing a batch of user-level writes intended to be sent to
 * the server in a single call. Each user-level batch gets a separate
 * WriteBatch with a new batch_id.
 * </pre>
 *
 * Protobuf type {@code firestore.client.WriteBatch}
 */
public  final class WriteBatch extends
    com.google.protobuf.GeneratedMessageLite<
        WriteBatch, WriteBatch.Builder> implements
    // @@protoc_insertion_point(message_implements:firestore.client.WriteBatch)
    WriteBatchOrBuilder {
  private WriteBatch() {
    writes_ = emptyProtobufList();
    baseWrites_ = emptyProtobufList();
  }
  public static final int BATCH_ID_FIELD_NUMBER = 1;
  private int batchId_;
  /**
   * <pre>
   * An identifier for this batch, allocated by the mutation queue in a
   * monotonically increasing manner.
   * </pre>
   *
   * <code>int32 batch_id = 1;</code>
   * @return The batchId.
   */
  @Override
  public int getBatchId() {
    return batchId_;
  }
  /**
   * <pre>
   * An identifier for this batch, allocated by the mutation queue in a
   * monotonically increasing manner.
   * </pre>
   *
   * <code>int32 batch_id = 1;</code>
   * @param value The batchId to set.
   */
  private void setBatchId(int value) {
    
    batchId_ = value;
  }
  /**
   * <pre>
   * An identifier for this batch, allocated by the mutation queue in a
   * monotonically increasing manner.
   * </pre>
   *
   * <code>int32 batch_id = 1;</code>
   */
  private void clearBatchId() {
    
    batchId_ = 0;
  }

  public static final int WRITES_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.google.firestore.v1.Write> writes_;
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  @Override
  public java.util.List<com.google.firestore.v1.Write> getWritesList() {
    return writes_;
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  public java.util.List<? extends com.google.firestore.v1.WriteOrBuilder> 
      getWritesOrBuilderList() {
    return writes_;
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  @Override
  public int getWritesCount() {
    return writes_.size();
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  @Override
  public com.google.firestore.v1.Write getWrites(int index) {
    return writes_.get(index);
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  public com.google.firestore.v1.WriteOrBuilder getWritesOrBuilder(
      int index) {
    return writes_.get(index);
  }
  private void ensureWritesIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.firestore.v1.Write> tmp = writes_;
    if (!tmp.isModifiable()) {
      writes_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void setWrites(
      int index, com.google.firestore.v1.Write value) {
    value.getClass();
  ensureWritesIsMutable();
    writes_.set(index, value);
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void addWrites(com.google.firestore.v1.Write value) {
    value.getClass();
  ensureWritesIsMutable();
    writes_.add(value);
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void addWrites(
      int index, com.google.firestore.v1.Write value) {
    value.getClass();
  ensureWritesIsMutable();
    writes_.add(index, value);
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void addAllWrites(
      Iterable<? extends com.google.firestore.v1.Write> values) {
    ensureWritesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, writes_);
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void clearWrites() {
    writes_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A list of writes to apply. All writes will be applied atomically.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write writes = 2;</code>
   */
  private void removeWrites(int index) {
    ensureWritesIsMutable();
    writes_.remove(index);
  }

  public static final int LOCAL_WRITE_TIME_FIELD_NUMBER = 3;
  private com.google.protobuf.Timestamp localWriteTime_;
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   */
  @Override
  public boolean hasLocalWriteTime() {
    return localWriteTime_ != null;
  }
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   */
  @Override
  public com.google.protobuf.Timestamp getLocalWriteTime() {
    return localWriteTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : localWriteTime_;
  }
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   */
  private void setLocalWriteTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  localWriteTime_ = value;
    
    }
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   */
  @SuppressWarnings({"ReferenceEquality"})
  private void mergeLocalWriteTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  if (localWriteTime_ != null &&
        localWriteTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      localWriteTime_ =
        com.google.protobuf.Timestamp.newBuilder(localWriteTime_).mergeFrom(value).buildPartial();
    } else {
      localWriteTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The local time at which the write batch was initiated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
   */
  private void clearLocalWriteTime() {  localWriteTime_ = null;
    
  }

  public static final int BASE_WRITES_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<com.google.firestore.v1.Write> baseWrites_;
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  @Override
  public java.util.List<com.google.firestore.v1.Write> getBaseWritesList() {
    return baseWrites_;
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  public java.util.List<? extends com.google.firestore.v1.WriteOrBuilder> 
      getBaseWritesOrBuilderList() {
    return baseWrites_;
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  @Override
  public int getBaseWritesCount() {
    return baseWrites_.size();
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  @Override
  public com.google.firestore.v1.Write getBaseWrites(int index) {
    return baseWrites_.get(index);
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  public com.google.firestore.v1.WriteOrBuilder getBaseWritesOrBuilder(
      int index) {
    return baseWrites_.get(index);
  }
  private void ensureBaseWritesIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.firestore.v1.Write> tmp = baseWrites_;
    if (!tmp.isModifiable()) {
      baseWrites_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void setBaseWrites(
      int index, com.google.firestore.v1.Write value) {
    value.getClass();
  ensureBaseWritesIsMutable();
    baseWrites_.set(index, value);
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void addBaseWrites(com.google.firestore.v1.Write value) {
    value.getClass();
  ensureBaseWritesIsMutable();
    baseWrites_.add(value);
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void addBaseWrites(
      int index, com.google.firestore.v1.Write value) {
    value.getClass();
  ensureBaseWritesIsMutable();
    baseWrites_.add(index, value);
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void addAllBaseWrites(
      Iterable<? extends com.google.firestore.v1.Write> values) {
    ensureBaseWritesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, baseWrites_);
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void clearBaseWrites() {
    baseWrites_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A list of pseudo-writes that represent a partial base state from when this
   * write batch was initially created. When computing the local view batch,
   * these base_writes are applied prior to the real writes in order to
   * override certain document fields from the remote document cache. This is
   * necessary in the case of non-idempotent writes (e.g. increment
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   * These writes are never sent to the backend.
   * </pre>
   *
   * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
   */
  private void removeBaseWrites(int index) {
    ensureBaseWritesIsMutable();
    baseWrites_.remove(index);
  }

  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.WriteBatch parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.firebase.firestore.proto.WriteBatch prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Message containing a batch of user-level writes intended to be sent to
   * the server in a single call. Each user-level batch gets a separate
   * WriteBatch with a new batch_id.
   * </pre>
   *
   * Protobuf type {@code firestore.client.WriteBatch}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.firebase.firestore.proto.WriteBatch, Builder> implements
      // @@protoc_insertion_point(builder_implements:firestore.client.WriteBatch)
      com.google.firebase.firestore.proto.WriteBatchOrBuilder {
    // Construct using com.google.firebase.firestore.proto.WriteBatch.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An identifier for this batch, allocated by the mutation queue in a
     * monotonically increasing manner.
     * </pre>
     *
     * <code>int32 batch_id = 1;</code>
     * @return The batchId.
     */
    @Override
    public int getBatchId() {
      return instance.getBatchId();
    }
    /**
     * <pre>
     * An identifier for this batch, allocated by the mutation queue in a
     * monotonically increasing manner.
     * </pre>
     *
     * <code>int32 batch_id = 1;</code>
     * @param value The batchId to set.
     * @return This builder for chaining.
     */
    public Builder setBatchId(int value) {
      copyOnWrite();
      instance.setBatchId(value);
      return this;
    }
    /**
     * <pre>
     * An identifier for this batch, allocated by the mutation queue in a
     * monotonically increasing manner.
     * </pre>
     *
     * <code>int32 batch_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearBatchId() {
      copyOnWrite();
      instance.clearBatchId();
      return this;
    }

    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    @Override
    public java.util.List<com.google.firestore.v1.Write> getWritesList() {
      return java.util.Collections.unmodifiableList(
          instance.getWritesList());
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    @Override
    public int getWritesCount() {
      return instance.getWritesCount();
    }/**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    @Override
    public com.google.firestore.v1.Write getWrites(int index) {
      return instance.getWrites(index);
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder setWrites(
        int index, com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.setWrites(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder setWrites(
        int index, com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.setWrites(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder addWrites(com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.addWrites(value);
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder addWrites(
        int index, com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.addWrites(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder addWrites(
        com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.addWrites(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder addWrites(
        int index, com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.addWrites(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder addAllWrites(
        Iterable<? extends com.google.firestore.v1.Write> values) {
      copyOnWrite();
      instance.addAllWrites(values);
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder clearWrites() {
      copyOnWrite();
      instance.clearWrites();
      return this;
    }
    /**
     * <pre>
     * A list of writes to apply. All writes will be applied atomically.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write writes = 2;</code>
     */
    public Builder removeWrites(int index) {
      copyOnWrite();
      instance.removeWrites(index);
      return this;
    }

    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    @Override
    public boolean hasLocalWriteTime() {
      return instance.hasLocalWriteTime();
    }
    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    @Override
    public com.google.protobuf.Timestamp getLocalWriteTime() {
      return instance.getLocalWriteTime();
    }
    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    public Builder setLocalWriteTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setLocalWriteTime(value);
      return this;
      }
    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    public Builder setLocalWriteTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setLocalWriteTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    public Builder mergeLocalWriteTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeLocalWriteTime(value);
      return this;
    }
    /**
     * <pre>
     * The local time at which the write batch was initiated.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_write_time = 3;</code>
     */
    public Builder clearLocalWriteTime() {  copyOnWrite();
      instance.clearLocalWriteTime();
      return this;
    }

    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    @Override
    public java.util.List<com.google.firestore.v1.Write> getBaseWritesList() {
      return java.util.Collections.unmodifiableList(
          instance.getBaseWritesList());
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    @Override
    public int getBaseWritesCount() {
      return instance.getBaseWritesCount();
    }/**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    @Override
    public com.google.firestore.v1.Write getBaseWrites(int index) {
      return instance.getBaseWrites(index);
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder setBaseWrites(
        int index, com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.setBaseWrites(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder setBaseWrites(
        int index, com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.setBaseWrites(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder addBaseWrites(com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.addBaseWrites(value);
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder addBaseWrites(
        int index, com.google.firestore.v1.Write value) {
      copyOnWrite();
      instance.addBaseWrites(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder addBaseWrites(
        com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.addBaseWrites(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder addBaseWrites(
        int index, com.google.firestore.v1.Write.Builder builderForValue) {
      copyOnWrite();
      instance.addBaseWrites(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder addAllBaseWrites(
        Iterable<? extends com.google.firestore.v1.Write> values) {
      copyOnWrite();
      instance.addAllBaseWrites(values);
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder clearBaseWrites() {
      copyOnWrite();
      instance.clearBaseWrites();
      return this;
    }
    /**
     * <pre>
     * A list of pseudo-writes that represent a partial base state from when this
     * write batch was initially created. When computing the local view batch,
     * these base_writes are applied prior to the real writes in order to
     * override certain document fields from the remote document cache. This is
     * necessary in the case of non-idempotent writes (e.g. increment
     * transforms) to make sure that the local view of the modified documents
     * doesn't flicker if the remote document cache receives the result of the
     * non-idempotent write before the write is removed from the queue.
     * These writes are never sent to the backend.
     * </pre>
     *
     * <code>repeated .google.firestore.v1.Write base_writes = 4;</code>
     */
    public Builder removeBaseWrites(int index) {
      copyOnWrite();
      instance.removeBaseWrites(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firestore.client.WriteBatch)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.firebase.firestore.proto.WriteBatch();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "batchId_",
            "writes_",
            com.google.firestore.v1.Write.class,
            "localWriteTime_",
            "baseWrites_",
            com.google.firestore.v1.Write.class,
          };
          String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0002\u0000\u0001\u0004\u0002\u001b" +
              "\u0003\t\u0004\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.firebase.firestore.proto.WriteBatch> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.firebase.firestore.proto.WriteBatch.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.firebase.firestore.proto.WriteBatch>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firestore.client.WriteBatch)
  private static final com.google.firebase.firestore.proto.WriteBatch DEFAULT_INSTANCE;
  static {
    WriteBatch defaultInstance = new WriteBatch();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      WriteBatch.class, defaultInstance);
  }

  public static com.google.firebase.firestore.proto.WriteBatch getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WriteBatch> PARSER;

  public static com.google.protobuf.Parser<WriteBatch> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

