// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firebase/firestore/proto/maybe_document.proto

package com.aves.flamingodb.proto;

/**
 * <pre>
 * Represents either an existing document, the explicitly known absence of a
 * document, or a document that is known to exist (at some version) but whose
 * contents are unknown.
 * </pre>
 *
 * Protobuf type {@code firestore.client.MaybeDocument}
 */
public  final class MaybeDocument extends
    com.google.protobuf.GeneratedMessageLite<
        MaybeDocument, MaybeDocument.Builder> implements
    // @@protoc_insertion_point(message_implements:firestore.client.MaybeDocument)
    MaybeDocumentOrBuilder {
  private MaybeDocument() {
  }
  private int documentTypeCase_ = 0;
  private Object documentType_;
  public enum DocumentTypeCase {
    NO_DOCUMENT(1),
    DOCUMENT(2),
    UNKNOWN_DOCUMENT(3),
    DOCUMENTTYPE_NOT_SET(0);
    private final int value;
    private DocumentTypeCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static DocumentTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static DocumentTypeCase forNumber(int value) {
      switch (value) {
        case 1: return NO_DOCUMENT;
        case 2: return DOCUMENT;
        case 3: return UNKNOWN_DOCUMENT;
        case 0: return DOCUMENTTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @Override
  public DocumentTypeCase
  getDocumentTypeCase() {
    return DocumentTypeCase.forNumber(
        documentTypeCase_);
  }

  private void clearDocumentType() {
    documentTypeCase_ = 0;
    documentType_ = null;
  }

  public static final int NO_DOCUMENT_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Used if the document is known to not exist.
   * </pre>
   *
   * <code>.firestore.client.NoDocument no_document = 1;</code>
   */
  @Override
  public boolean hasNoDocument() {
    return documentTypeCase_ == 1;
  }
  /**
   * <pre>
   * Used if the document is known to not exist.
   * </pre>
   *
   * <code>.firestore.client.NoDocument no_document = 1;</code>
   */
  @Override
  public com.aves.flamingodb.proto.NoDocument getNoDocument() {
    if (documentTypeCase_ == 1) {
       return (com.aves.flamingodb.proto.NoDocument) documentType_;
    }
    return com.aves.flamingodb.proto.NoDocument.getDefaultInstance();
  }
  /**
   * <pre>
   * Used if the document is known to not exist.
   * </pre>
   *
   * <code>.firestore.client.NoDocument no_document = 1;</code>
   */
  private void setNoDocument(com.aves.flamingodb.proto.NoDocument value) {
    value.getClass();
  documentType_ = value;
    documentTypeCase_ = 1;
  }
  /**
   * <pre>
   * Used if the document is known to not exist.
   * </pre>
   *
   * <code>.firestore.client.NoDocument no_document = 1;</code>
   */
  private void mergeNoDocument(com.aves.flamingodb.proto.NoDocument value) {
    value.getClass();
  if (documentTypeCase_ == 1 &&
        documentType_ != com.aves.flamingodb.proto.NoDocument.getDefaultInstance()) {
      documentType_ = com.aves.flamingodb.proto.NoDocument.newBuilder((com.aves.flamingodb.proto.NoDocument) documentType_)
          .mergeFrom(value).buildPartial();
    } else {
      documentType_ = value;
    }
    documentTypeCase_ = 1;
  }
  /**
   * <pre>
   * Used if the document is known to not exist.
   * </pre>
   *
   * <code>.firestore.client.NoDocument no_document = 1;</code>
   */
  private void clearNoDocument() {
    if (documentTypeCase_ == 1) {
      documentTypeCase_ = 0;
      documentType_ = null;
    }
  }

  public static final int DOCUMENT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The document (if it exists).
   * </pre>
   *
   * <code>.google.firestore.v1.Document document = 2;</code>
   */
  @Override
  public boolean hasDocument() {
    return documentTypeCase_ == 2;
  }
  /**
   * <pre>
   * The document (if it exists).
   * </pre>
   *
   * <code>.google.firestore.v1.Document document = 2;</code>
   */
  @Override
  public com.google.firestore.v1.Document getDocument() {
    if (documentTypeCase_ == 2) {
       return (com.google.firestore.v1.Document) documentType_;
    }
    return com.google.firestore.v1.Document.getDefaultInstance();
  }
  /**
   * <pre>
   * The document (if it exists).
   * </pre>
   *
   * <code>.google.firestore.v1.Document document = 2;</code>
   */
  private void setDocument(com.google.firestore.v1.Document value) {
    value.getClass();
  documentType_ = value;
    documentTypeCase_ = 2;
  }
  /**
   * <pre>
   * The document (if it exists).
   * </pre>
   *
   * <code>.google.firestore.v1.Document document = 2;</code>
   */
  private void mergeDocument(com.google.firestore.v1.Document value) {
    value.getClass();
  if (documentTypeCase_ == 2 &&
        documentType_ != com.google.firestore.v1.Document.getDefaultInstance()) {
      documentType_ = com.google.firestore.v1.Document.newBuilder((com.google.firestore.v1.Document) documentType_)
          .mergeFrom(value).buildPartial();
    } else {
      documentType_ = value;
    }
    documentTypeCase_ = 2;
  }
  /**
   * <pre>
   * The document (if it exists).
   * </pre>
   *
   * <code>.google.firestore.v1.Document document = 2;</code>
   */
  private void clearDocument() {
    if (documentTypeCase_ == 2) {
      documentTypeCase_ = 0;
      documentType_ = null;
    }
  }

  public static final int UNKNOWN_DOCUMENT_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Used if the document is known to exist but its data is unknown.
   * </pre>
   *
   * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
   */
  @Override
  public boolean hasUnknownDocument() {
    return documentTypeCase_ == 3;
  }
  /**
   * <pre>
   * Used if the document is known to exist but its data is unknown.
   * </pre>
   *
   * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
   */
  @Override
  public com.aves.flamingodb.proto.UnknownDocument getUnknownDocument() {
    if (documentTypeCase_ == 3) {
       return (com.aves.flamingodb.proto.UnknownDocument) documentType_;
    }
    return com.aves.flamingodb.proto.UnknownDocument.getDefaultInstance();
  }
  /**
   * <pre>
   * Used if the document is known to exist but its data is unknown.
   * </pre>
   *
   * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
   */
  private void setUnknownDocument(com.aves.flamingodb.proto.UnknownDocument value) {
    value.getClass();
  documentType_ = value;
    documentTypeCase_ = 3;
  }
  /**
   * <pre>
   * Used if the document is known to exist but its data is unknown.
   * </pre>
   *
   * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
   */
  private void mergeUnknownDocument(com.aves.flamingodb.proto.UnknownDocument value) {
    value.getClass();
  if (documentTypeCase_ == 3 &&
        documentType_ != com.aves.flamingodb.proto.UnknownDocument.getDefaultInstance()) {
      documentType_ = com.aves.flamingodb.proto.UnknownDocument.newBuilder((com.aves.flamingodb.proto.UnknownDocument) documentType_)
          .mergeFrom(value).buildPartial();
    } else {
      documentType_ = value;
    }
    documentTypeCase_ = 3;
  }
  /**
   * <pre>
   * Used if the document is known to exist but its data is unknown.
   * </pre>
   *
   * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
   */
  private void clearUnknownDocument() {
    if (documentTypeCase_ == 3) {
      documentTypeCase_ = 0;
      documentType_ = null;
    }
  }

  public static final int HAS_COMMITTED_MUTATIONS_FIELD_NUMBER = 4;
  private boolean hasCommittedMutations_;
  /**
   * <pre>
   * `has_committed_mutations` marks documents that were written to the remote
   * document store based on a write acknowledgment. These documents are
   * potentially inconsistent with the backend's copy and use the write's
   * commit version as their document version.
   * </pre>
   *
   * <code>bool has_committed_mutations = 4;</code>
   * @return The hasCommittedMutations.
   */
  @Override
  public boolean getHasCommittedMutations() {
    return hasCommittedMutations_;
  }
  /**
   * <pre>
   * `has_committed_mutations` marks documents that were written to the remote
   * document store based on a write acknowledgment. These documents are
   * potentially inconsistent with the backend's copy and use the write's
   * commit version as their document version.
   * </pre>
   *
   * <code>bool has_committed_mutations = 4;</code>
   * @param value The hasCommittedMutations to set.
   */
  private void setHasCommittedMutations(boolean value) {
    
    hasCommittedMutations_ = value;
  }
  /**
   * <pre>
   * `has_committed_mutations` marks documents that were written to the remote
   * document store based on a write acknowledgment. These documents are
   * potentially inconsistent with the backend's copy and use the write's
   * commit version as their document version.
   * </pre>
   *
   * <code>bool has_committed_mutations = 4;</code>
   */
  private void clearHasCommittedMutations() {
    
    hasCommittedMutations_ = false;
  }

  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.aves.flamingodb.proto.MaybeDocument parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.aves.flamingodb.proto.MaybeDocument prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents either an existing document, the explicitly known absence of a
   * document, or a document that is known to exist (at some version) but whose
   * contents are unknown.
   * </pre>
   *
   * Protobuf type {@code firestore.client.MaybeDocument}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.aves.flamingodb.proto.MaybeDocument, Builder> implements
      // @@protoc_insertion_point(builder_implements:firestore.client.MaybeDocument)
      com.aves.flamingodb.proto.MaybeDocumentOrBuilder {
    // Construct using com.aves.flamingodb.proto.MaybeDocument.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @Override
    public DocumentTypeCase
        getDocumentTypeCase() {
      return instance.getDocumentTypeCase();
    }

    public Builder clearDocumentType() {
      copyOnWrite();
      instance.clearDocumentType();
      return this;
    }


    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    @Override
    public boolean hasNoDocument() {
      return instance.hasNoDocument();
    }
    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    @Override
    public com.aves.flamingodb.proto.NoDocument getNoDocument() {
      return instance.getNoDocument();
    }
    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    public Builder setNoDocument(com.aves.flamingodb.proto.NoDocument value) {
      copyOnWrite();
      instance.setNoDocument(value);
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    public Builder setNoDocument(
        com.aves.flamingodb.proto.NoDocument.Builder builderForValue) {
      copyOnWrite();
      instance.setNoDocument(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    public Builder mergeNoDocument(com.aves.flamingodb.proto.NoDocument value) {
      copyOnWrite();
      instance.mergeNoDocument(value);
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to not exist.
     * </pre>
     *
     * <code>.firestore.client.NoDocument no_document = 1;</code>
     */
    public Builder clearNoDocument() {
      copyOnWrite();
      instance.clearNoDocument();
      return this;
    }

    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    @Override
    public boolean hasDocument() {
      return instance.hasDocument();
    }
    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    @Override
    public com.google.firestore.v1.Document getDocument() {
      return instance.getDocument();
    }
    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    public Builder setDocument(com.google.firestore.v1.Document value) {
      copyOnWrite();
      instance.setDocument(value);
      return this;
    }
    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    public Builder setDocument(
        com.google.firestore.v1.Document.Builder builderForValue) {
      copyOnWrite();
      instance.setDocument(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    public Builder mergeDocument(com.google.firestore.v1.Document value) {
      copyOnWrite();
      instance.mergeDocument(value);
      return this;
    }
    /**
     * <pre>
     * The document (if it exists).
     * </pre>
     *
     * <code>.google.firestore.v1.Document document = 2;</code>
     */
    public Builder clearDocument() {
      copyOnWrite();
      instance.clearDocument();
      return this;
    }

    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    @Override
    public boolean hasUnknownDocument() {
      return instance.hasUnknownDocument();
    }
    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    @Override
    public com.aves.flamingodb.proto.UnknownDocument getUnknownDocument() {
      return instance.getUnknownDocument();
    }
    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    public Builder setUnknownDocument(com.aves.flamingodb.proto.UnknownDocument value) {
      copyOnWrite();
      instance.setUnknownDocument(value);
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    public Builder setUnknownDocument(
        com.aves.flamingodb.proto.UnknownDocument.Builder builderForValue) {
      copyOnWrite();
      instance.setUnknownDocument(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    public Builder mergeUnknownDocument(com.aves.flamingodb.proto.UnknownDocument value) {
      copyOnWrite();
      instance.mergeUnknownDocument(value);
      return this;
    }
    /**
     * <pre>
     * Used if the document is known to exist but its data is unknown.
     * </pre>
     *
     * <code>.firestore.client.UnknownDocument unknown_document = 3;</code>
     */
    public Builder clearUnknownDocument() {
      copyOnWrite();
      instance.clearUnknownDocument();
      return this;
    }

    /**
     * <pre>
     * `has_committed_mutations` marks documents that were written to the remote
     * document store based on a write acknowledgment. These documents are
     * potentially inconsistent with the backend's copy and use the write's
     * commit version as their document version.
     * </pre>
     *
     * <code>bool has_committed_mutations = 4;</code>
     * @return The hasCommittedMutations.
     */
    @Override
    public boolean getHasCommittedMutations() {
      return instance.getHasCommittedMutations();
    }
    /**
     * <pre>
     * `has_committed_mutations` marks documents that were written to the remote
     * document store based on a write acknowledgment. These documents are
     * potentially inconsistent with the backend's copy and use the write's
     * commit version as their document version.
     * </pre>
     *
     * <code>bool has_committed_mutations = 4;</code>
     * @param value The hasCommittedMutations to set.
     * @return This builder for chaining.
     */
    public Builder setHasCommittedMutations(boolean value) {
      copyOnWrite();
      instance.setHasCommittedMutations(value);
      return this;
    }
    /**
     * <pre>
     * `has_committed_mutations` marks documents that were written to the remote
     * document store based on a write acknowledgment. These documents are
     * potentially inconsistent with the backend's copy and use the write's
     * commit version as their document version.
     * </pre>
     *
     * <code>bool has_committed_mutations = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearHasCommittedMutations() {
      copyOnWrite();
      instance.clearHasCommittedMutations();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firestore.client.MaybeDocument)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.aves.flamingodb.proto.MaybeDocument();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "documentType_",
            "documentTypeCase_",
            com.aves.flamingodb.proto.NoDocument.class,
            com.google.firestore.v1.Document.class,
            com.aves.flamingodb.proto.UnknownDocument.class,
            "hasCommittedMutations_",
          };
          String info =
              "\u0000\u0004\u0001\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001<\u0000\u0002<" +
              "\u0000\u0003<\u0000\u0004\u0007";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.aves.flamingodb.proto.MaybeDocument> parser = PARSER;
        if (parser == null) {
          synchronized (com.aves.flamingodb.proto.MaybeDocument.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.aves.flamingodb.proto.MaybeDocument>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firestore.client.MaybeDocument)
  private static final com.aves.flamingodb.proto.MaybeDocument DEFAULT_INSTANCE;
  static {
    MaybeDocument defaultInstance = new MaybeDocument();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      MaybeDocument.class, defaultInstance);
  }

  public static com.aves.flamingodb.proto.MaybeDocument getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MaybeDocument> PARSER;

  public static com.google.protobuf.Parser<MaybeDocument> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

