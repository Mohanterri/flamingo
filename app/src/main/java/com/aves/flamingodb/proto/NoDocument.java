// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firebase/firestore/proto/maybe_document.proto

package com.aves.flamingodb.proto;

/**
 * <pre>
 * A message indicating that the document is known to not exist.
 * </pre>
 *
 * Protobuf type {@code firestore.client.NoDocument}
 */
public  final class NoDocument extends
    com.google.protobuf.GeneratedMessageLite<
        NoDocument, NoDocument.Builder> implements
    // @@protoc_insertion_point(message_implements:firestore.client.NoDocument)
    NoDocumentOrBuilder {
  private NoDocument() {
    name_ = "";
  }
  public static final int NAME_FIELD_NUMBER = 1;
  private String name_;
  /**
   * <pre>
   * The name of the document that does not exist, in the standard format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @Override
  public String getName() {
    return name_;
  }
  /**
   * <pre>
   * The name of the document that does not exist, in the standard format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The name of the document that does not exist, in the standard format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      String value) {
    Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * The name of the document that does not exist, in the standard format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The name of the document that does not exist, in the standard format:
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int READ_TIME_FIELD_NUMBER = 2;
  private com.google.protobuf.Timestamp readTime_;
  /**
   * <pre>
   * The time at which we observed that it does not exist.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp read_time = 2;</code>
   */
  @Override
  public boolean hasReadTime() {
    return readTime_ != null;
  }
  /**
   * <pre>
   * The time at which we observed that it does not exist.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp read_time = 2;</code>
   */
  @Override
  public com.google.protobuf.Timestamp getReadTime() {
    return readTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : readTime_;
  }
  /**
   * <pre>
   * The time at which we observed that it does not exist.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp read_time = 2;</code>
   */
  private void setReadTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  readTime_ = value;
    
    }
  /**
   * <pre>
   * The time at which we observed that it does not exist.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp read_time = 2;</code>
   */
  @SuppressWarnings({"ReferenceEquality"})
  private void mergeReadTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  if (readTime_ != null &&
        readTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      readTime_ =
        com.google.protobuf.Timestamp.newBuilder(readTime_).mergeFrom(value).buildPartial();
    } else {
      readTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The time at which we observed that it does not exist.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp read_time = 2;</code>
   */
  private void clearReadTime() {  readTime_ = null;
    
  }

  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.firebase.firestore.proto.NoDocument parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.firebase.firestore.proto.NoDocument prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A message indicating that the document is known to not exist.
   * </pre>
   *
   * Protobuf type {@code firestore.client.NoDocument}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.firebase.firestore.proto.NoDocument, Builder> implements
      // @@protoc_insertion_point(builder_implements:firestore.client.NoDocument)
      com.google.firebase.firestore.proto.NoDocumentOrBuilder {
    // Construct using com.google.firebase.firestore.proto.NoDocument.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The name of the document that does not exist, in the standard format:
     * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @Override
    public String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The name of the document that does not exist, in the standard format:
     * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The name of the document that does not exist, in the standard format:
     * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The name of the document that does not exist, in the standard format:
     * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The name of the document that does not exist, in the standard format:
     * `projects/{project_id}/databases/{database_id}/documents/{document_path}`
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    @Override
    public boolean hasReadTime() {
      return instance.hasReadTime();
    }
    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    @Override
    public com.google.protobuf.Timestamp getReadTime() {
      return instance.getReadTime();
    }
    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    public Builder setReadTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setReadTime(value);
      return this;
      }
    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    public Builder setReadTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setReadTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    public Builder mergeReadTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeReadTime(value);
      return this;
    }
    /**
     * <pre>
     * The time at which we observed that it does not exist.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp read_time = 2;</code>
     */
    public Builder clearReadTime() {  copyOnWrite();
      instance.clearReadTime();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:firestore.client.NoDocument)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.firebase.firestore.proto.NoDocument();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "name_",
            "readTime_",
          };
          String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\t" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.firebase.firestore.proto.NoDocument> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.firebase.firestore.proto.NoDocument.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.firebase.firestore.proto.NoDocument>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:firestore.client.NoDocument)
  private static final com.google.firebase.firestore.proto.NoDocument DEFAULT_INSTANCE;
  static {
    NoDocument defaultInstance = new NoDocument();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      NoDocument.class, defaultInstance);
  }

  public static com.google.firebase.firestore.proto.NoDocument getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<NoDocument> PARSER;

  public static com.google.protobuf.Parser<NoDocument> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

