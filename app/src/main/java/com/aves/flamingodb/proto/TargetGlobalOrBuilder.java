// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firebase/firestore/proto/target.proto

package com.aves.flamingodb.proto;

public interface TargetGlobalOrBuilder extends
    // @@protoc_insertion_point(interface_extends:firestore.client.TargetGlobal)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The highest numbered target id across all Targets.
   * See Target.target_id.
   * </pre>
   *
   * <code>int32 highest_target_id = 1;</code>
   * @return The highestTargetId.
   */
  int getHighestTargetId();

  /**
   * <pre>
   * The highest numbered last_listen_sequence_number across all Targets.
   * See Target.last_listen_sequence_number.
   * </pre>
   *
   * <code>int64 highest_listen_sequence_number = 2;</code>
   * @return The highestListenSequenceNumber.
   */
  long getHighestListenSequenceNumber();

  /**
   * <pre>
   * A global snapshot version representing the last consistent snapshot we
   * received from the backend. This is monotonically increasing and any
   * snapshots received from the backend prior to this version (e.g. for
   * targets resumed with a resume_token) should be suppressed (buffered) until
   * the backend has caught up to this snapshot_version again. This prevents
   * our cache from ever going backwards in time.
   * This is updated whenever our we get a TargetChange with a read_time and
   * empty target_ids.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp last_remote_snapshot_version = 3;</code>
   * @return Whether the lastRemoteSnapshotVersion field is set.
   */
  boolean hasLastRemoteSnapshotVersion();
  /**
   * <pre>
   * A global snapshot version representing the last consistent snapshot we
   * received from the backend. This is monotonically increasing and any
   * snapshots received from the backend prior to this version (e.g. for
   * targets resumed with a resume_token) should be suppressed (buffered) until
   * the backend has caught up to this snapshot_version again. This prevents
   * our cache from ever going backwards in time.
   * This is updated whenever our we get a TargetChange with a read_time and
   * empty target_ids.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp last_remote_snapshot_version = 3;</code>
   * @return The lastRemoteSnapshotVersion.
   */
  com.google.protobuf.Timestamp getLastRemoteSnapshotVersion();

  /**
   * <pre>
   * On platforms that need it, holds the number of targets persisted.
   * </pre>
   *
   * <code>int32 target_count = 4;</code>
   * @return The targetCount.
   */
  int getTargetCount();
}
